type Address {
  street: String
  city: String
  region: String
  postalCode: String
  country: String
  phone: String
}

input AddressInput {
  street: String
  city: String
  region: String
  postalCode: String
  country: String
  phone: String
}

type Customer {
  _id: ID!
  customerID: String!
  companyName: String
  contactName: String
  contactTitle: String
  address: Address
}

type CustomerCreatePayload {
  record: Customer
}

input CustomerFilterInput {
  companyName: String
  address: AddressInput
}

input CustomerInput {
  customerID: String!
  companyName: String!
  contactName: String
  contactTitle: String
  address: AddressInput
}

type CustomerMutations {
  create(input: CustomerInput!): CustomerCreatePayload
}

scalar Date

type Employee {
  _id: ID!
  employeeID: Int!
  lastName: String
  firstName: String
  title: String
  titleOfCourtesy: String
  birthDate: Date
  hireDate: Date
  address: Address
  phone: String
  notes: String
  reportsTo: Employee
  reportsID: Int
  subordinates: [Employee]!
  territoryID: [Int]!
}

input EmployeeFilterInput {
  title: String
  lastName: String
  reportsTo: Int
  address: AddressInput
}

type Mutation {
  customer: CustomerMutations
  time: Float!
}

type Order {
  _id: Int!
  orderID: Int
  customerID: String
  customer: Customer
  employeeID: Int
  employee: Employee
  orderDate: Date
  requiredDate: Date
  shippedDate: Date
  shipVia: Int
  freight: Float
  shipName: String
  shipAddress: Address
  details: [OrderDetails]!
}

type OrderDetails {
  productID: Int
  product: Product
  unitPrice: Float
  quantity: Int
  discount: Float
}

input OrderFilterInput {
  orderID: Int
  customerID: String
  employeeID: Int
  orderDate: Date
  requiredDate: Date
  shippedDate: Date
  shipVia: Int
  freight: Float
  shipName: String
  shipAddress: AddressInput
}

type Product {
  _id: ID!
  productID: Int!
  name: String
  supplierID: Int
  categoryID: Int
  quantityPerUnit: String
  unitPrice: Float
  unitsInStock: Int
  unitsOnOrder: Int
  reorderLevel: Int
  discontinued: Boolean
}

input ProductFilterInput {
  productID: Int
  productName: String
  supplierID: Int
  categoryID: Int
  quantityPerUnit: String
  unitPrice: Float
  unitsInStock: Int
  unitsOnOrder: Int
  reorderLevel: Int
  discontinued: Boolean
}

type Query {
  customer(id: ID!): Customer
  customers(
    filter: CustomerFilterInput
    limit: Int! = 20
    offset: Int
  ): [Customer]!
  employee(id: ID!): Employee
  employees(
    filter: EmployeeFilterInput
    limit: Int! = 20
    offset: Int
  ): [Employee]!
  order(id: ID!): Order
  orders(filter: OrderFilterInput, limit: Int! = 20, offset: Int): [Order!]!
  product(id: ID!): Product
  products(
    filter: ProductFilterInput
    limit: Int! = 20
    offset: Int
  ): [Product]!
  hi(name: String!): String
  time: Float!
}
